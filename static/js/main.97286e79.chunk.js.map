{"version":3,"sources":["components/DisplayAsset.js","components/DisplayChartAssets.js","components/ProcessChartData.js","components/AssetChart.js","components/ProcessData.js","components/DataFetch.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayAsset","props","Text","Typography","asset","handleClick","span","id","asset_symbol","onClick","type","asset_name","asset_price","change_24h","toFixed","DisplayChartAssets","series","name","assetSymbol","data","chartData","options","chart","height","animations","style","colors","plotOptions","candlestick","useFillColor","title","text","toUpperCase","align","xaxis","yaxis","tooltip","enabled","useEffect","ProcessChartData","useState","map","chunk","x","Date","time","y","open","high","low","close","setchartData","console","log","length","AssetChart","asset_chart_data","setasset_chart_data","fetchData","React","useCallback","axios","quoteTradingSymbol","baseTradingSymbol","interval","then","response","catch","error","DataFetch","setAssetSymbol","asset_data","symbol","current_price","price_change_percentage_24h_in_currency","e","a","target","className","width","assets","setAssets","params","vs_currency","order","per_page","page","sparkline","price_change_percentage","App","class","header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97286e79.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Typography, Row, Col } from 'antd';\r\n\r\n\r\nfunction DisplayAsset(props) {\r\n\r\n    const { Text} = Typography;\r\n    const {asset, handleClick} = props\r\n    // console.log(handleClick);\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span = {8}>\r\n                    <Text id = {asset.asset_symbol} onClick = {handleClick} type=\"secondary\">{asset.asset_name}</Text>\r\n                </Col>\r\n                <Col span = {8}>\r\n                    <Text type=\"secondary\">${asset.asset_price}</Text>\r\n                </Col>\r\n                <Col span = {8}>\r\n                    <Text type=\"secondary\">{(asset.change_24h).toFixed(2)}%</Text>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayAsset\r\n\r\n","import React, { useEffect } from 'react'\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\n\r\nfunction DisplayChartAssets(props) {\r\n    \r\n    const series = [{\r\n        name: props.assetSymbol,\r\n        data: props.chartData\r\n    }]\r\n    \r\n    const options = {\r\n        chart: {\r\n            type: 'candlestick',\r\n            height: 350,\r\n            // events: {\r\n            //     beforeZoom: function(ctx) {\r\n            //         // we need to clear the range as we only need it on the iniital load.\r\n            //         ctx.w.config.xaxis.range = undefined\r\n            //     }\r\n            // }\r\n        },\r\n        animations: {\r\n            \r\n            style: {\r\n                colors: ['#000000']\r\n            }\r\n        },\r\n        plotOptions: {\r\n            candlestick: {\r\n                useFillColor: true\r\n            }\r\n        },\r\n        title: {\r\n            text: props.assetSymbol.toUpperCase() + ' Price Chart',\r\n            align: 'left'\r\n        },\r\n        xaxis: {\r\n            type: 'datetime',\r\n            // range: new Date().getTime() - (new Date().getTime() - 518400000)\r\n        },\r\n        yaxis: {\r\n            tooltip: {\r\n                enabled: true,\r\n            },\r\n            title: {\r\n                text: \"Price(USD)\"\r\n            }\r\n        }\r\n    }\r\n\r\n    // const options =  {\r\n    //     chart: {\r\n    //     height: 350,\r\n    //     type: 'candlestick',\r\n    //     },\r\n    //     title: {\r\n    //     text: 'CandleStick Chart - Category X-axis',\r\n    //     align: 'left'\r\n    //     },\r\n    //     annotations: {\r\n    //     xaxis: [\r\n    //         {\r\n    //         x: 'Oct 06 14:00',\r\n    //         borderColor: '#00E396',\r\n    //         label: {\r\n    //             borderColor: '#00E396',\r\n    //             style: {\r\n    //             fontSize: '12px',\r\n    //             color: '#fff',\r\n    //             background: '#00E396'\r\n    //             },\r\n    //             orientation: 'horizontal',\r\n    //             offsetY: 7,\r\n    //             text: 'Annotation Test'\r\n    //         }\r\n    //         }\r\n    //     ]\r\n    //     },\r\n    //     tooltip: {\r\n    //         enabled: true,\r\n    //     },\r\n    //     xaxis: {\r\n    //         type: 'category',\r\n    //         labels: {\r\n    //             formatter: function(val) {\r\n    //             return dayjs(val).format('MMM DD HH:mm')\r\n    //             }\r\n    //         }\r\n    //     },\r\n    //     yaxis: {\r\n    //         tooltip: {\r\n    //             enabled: true\r\n    //         }\r\n    //     }\r\n    // }\r\n            \r\n          \r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n    }, [])\r\n    \r\n    return (\r\n        <div>\r\n            {props.chartData && <ReactApexChart options={options} series={series} type=\"candlestick\" height={550}  />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayChartAssets\r\n","import React, { useEffect, useState } from 'react'\r\nimport DisplayChartAssets from './DisplayChartAssets'\r\n\r\n\r\nfunction ProcessChartData(props) {\r\n\r\n    let {data} = props\r\n    \r\n    // data = data.slice(data.length/2, data.length)\r\n    const [chartData, setchartData] = useState(data.map((chunk) => {\r\n        return(\r\n            {\r\n                x: new Date(chunk.time),\r\n                y: [chunk.open, chunk.high, chunk.low, chunk.close]\r\n            }\r\n        )\r\n    }))\r\n    // const chartData = data.map((chunk) => {\r\n    //     return(\r\n    //         {\r\n    //             x: new Date(chunk.time),\r\n    //             y: [chunk.open, chunk.high, chunk.low, chunk.close]\r\n    //         }\r\n    //     )\r\n    // })\r\n\r\n    useEffect(() => {\r\n        console.log(\"re-rendered\");\r\n        setchartData(data.map((chunk) => {\r\n        return(\r\n            {\r\n                x: new Date(chunk.time),\r\n                y: [chunk.open, chunk.high, chunk.low, chunk.close]\r\n            }\r\n        )\r\n    }))\r\n    }, [data])\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {chartData.length!==0 && <DisplayChartAssets assetSymbol = {props.assetSymbol} chartData = {chartData}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProcessChartData\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport ProcessChartData from './ProcessChartData'\r\nimport { Typography } from 'antd';\r\n\r\nfunction AssetChart(props) {\r\n\r\n    const { Text } = Typography;\r\n    const {assetSymbol} = props\r\n    const assetsDataUrl = \"https://dev-api.shrimpy.io/v1/exchanges/binanceus/candles\"\r\n    // const params = {\r\n    //     quoteTradingSymbol: \"USD\",\r\n    //     baseTradingSymbol: assetSymbol,\r\n    //     interval : \"1m\"\r\n    // }\r\n    const [asset_chart_data, setasset_chart_data] = useState([])\r\n    // const headers = {'X-CoinAPI-Key': 'CCB0277D-9D40-4B99-B4AC-70A47139EECF'}\r\n\r\n    const fetchData = React.useCallback(() => {\r\n        axios({\r\n            \"method\": \"GET\",\r\n            \"url\": assetsDataUrl,\r\n            \"params\": {\r\n                quoteTradingSymbol: \"USD\",\r\n                baseTradingSymbol: props.assetSymbol,\r\n                interval : \"1h\"\r\n            }\r\n        })\r\n        .then((response) => {\r\n            console.log('received', props.assetSymbol);\r\n            setasset_chart_data(response.data)\r\n            \r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n    }, [props.assetSymbol])\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [fetchData, assetSymbol])\r\n\r\n    return (\r\n        <div>\r\n            <Text type=\"secondary\">{assetSymbol.toUpperCase() ? assetSymbol.toUpperCase(): \"No Selected Coin\"}</Text>\r\n            {asset_chart_data.length!==0 && <ProcessChartData assetSymbol = {props.assetSymbol} data = {asset_chart_data}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssetChart\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState } from 'react'\r\nimport { Typography,  Row, Col } from 'antd';\r\nimport '../static/css/ProcessData.css'\r\nimport DisplayAsset from './DisplayAsset';\r\nimport AssetChart from './AssetChart';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\n\r\n\r\nexport default function DataFetch(props) {\r\n\r\n    const {data} = props\r\n    const { Text } = Typography;\r\n    const [assetSymbol, setAssetSymbol] = useState(\"\")\r\n    const asset_data = data.map(asset => {\r\n        \r\n        return(\r\n            {\r\n                asset_symbol: asset.symbol,\r\n                asset_name: asset.name,\r\n                asset_price: asset.current_price,\r\n                change_24h: asset.price_change_percentage_24h_in_currency\r\n            }\r\n        )\r\n    })\r\n\r\n    async function handleClick(e){\r\n        setAssetSymbol(e.target.id);\r\n    }\r\n\r\n    return (\r\n        \r\n        <div>\r\n            {!asset_data && <h2>Processing...</h2>} \r\n            <div className=\"assets_wrapper\">\r\n                \r\n                <Row>\r\n                    <Col span = {6}>\r\n                        <div className = \"assets-heading\">\r\n                            <Row>\r\n                                <Col span = {23}>\r\n                                    <Row>\r\n                                        <Col span = {8}>\r\n                                            <Text type=\"secondary\">Coin Name</Text>\r\n                                        </Col>\r\n                                        <Col span = {8}>\r\n                                            <Text type=\"secondary\">Price(USD)</Text>\r\n                                        </Col>\r\n                                        <Col span = {8}>\r\n                                            <Text type=\"secondary\">Change(24h)</Text>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                                \r\n                                <hr />\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span = {6}>\r\n                        <Scrollbars style={{ width: 350, height: 600 }}>\r\n                            {asset_data.map(asset => {\r\n                                return(\r\n                                    <div className = \"assets-grid\">\r\n                                        <Row>\r\n                                            <Col span = {24} className = \"assets-shadow\">\r\n                                                <DisplayAsset asset = {asset} handleClick = {handleClick} />  \r\n                                            </Col>\r\n                                            <hr />\r\n                                        </Row>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </Scrollbars>\r\n                    </Col>\r\n                    <Col span = {16}>\r\n                        {assetSymbol && <AssetChart assetSymbol = {assetSymbol}/>}\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// import React, { Component } from 'react'\r\n\r\n// export class processData extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//                         priceAssets: [],\r\n//                     };\r\n//     }\r\n\r\n//     async processPriceAssets(){\r\n//         Array.isArray(this.state.priceAssets) && this.props.data.map(chunk=> this.setState(this.state.priceAssets.push({\r\n//             asset_name: chunk.name,\r\n//             current_price: chunk.current_price\r\n//         })), () => console.log(typeof priceAssets))\r\n//         console.log(this.state.priceAssets[10].asset_name);\r\n//     }\r\n\r\n//     componentDidMount(){\r\n//         console.log('Process Rendered..');\r\n//         console.log(this.props.data);\r\n//         // this.processPriceAssets()\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <h2>Process Rendered..</h2>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default processData\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react'\r\nimport ProcessData from \"./ProcessData\"\r\nimport axios from 'axios'\r\n\r\nexport default function DataFetch() {\r\n    const [assets, setAssets] = useState([])\r\n    \r\n    // C99C093E-B248-42DD-A3D0-D07A88BB3D88\r\n    // 3B8CFDA2-B414-41E0-ADCD-D81C15DB6910\r\n    const assetsDataUrl = \"https://api.coingecko.com/api/v3/coins/markets\"\r\n    const params = {\r\n        vs_currency: \"usd\",\r\n        order: \"market_cap_desc\",\r\n        per_page: 100,\r\n        page: 1,\r\n        sparkline: false,\r\n        price_change_percentage: \"24h\"\r\n    }\r\n    // const headers = {'X-CoinAPI-Key': 'CCB0277D-9D40-4B99-B4AC-70A47139EECF'}\r\n\r\n    const fetchData = React.useCallback(() => {\r\n        axios({\r\n            \"method\": \"GET\",\r\n            \"url\": assetsDataUrl,\r\n            \"params\": params\r\n        })\r\n        .then((response) => {\r\n            setAssets(response.data)\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [fetchData])\r\n\r\n    return (\r\n        <div>\r\n            <ProcessData data = {assets}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import './App.less';\nimport { ResponsiveLine } from '@nivo/line'\nimport {createData as data, header} from './components/data'\nimport DataFetch from './components/DataFetch';\n\n\nfunction App() {\n    const theme = {\n        background: \"#222222\",\n        axis: {\n            fontSize: \"14px\",\n            tickColor: \"#eee\",\n            ticks: {\n            line: {\n                stroke: \"#555555\"\n            },\n            text: {\n                fill: \"#ffffff\"     \n            }\n            },\n            legend: {\n                text: {\n                    fill: \"#aaaaaa\"\n                },\n            },\n            \n        },\n        grid: {\n            line: {\n                stroke: \"#555555\"\n            }\n        },\n        textColor:  \"#ffffff\"\n    }\n\n    const legends = [\n            {\n                \n                    anchor: 'bottom-right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 100,\n                    translateY: 0,\n                    itemsSpacing: 0,\n                    itemDirection: 'left-to-right',\n                    itemWidth: 80,\n                    itemHeight: 20,\n                    itemOpacity: 0.75,\n                    itemTextColor: \"#ffffff\",\n                    symbolSize: 12,\n                    symbolShape: 'circle',\n                    symbolBorderColor: 'rgba(0, 0, 0, 255)',\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemBackground: 'rgba(0, 0, 0, 0.03)',\n                                itemOpacity: 1\n                            }\n                        }\n                    ]\n                \n            }\n        ]\n//{background: \"#273859\"}\n  return (\n    <div className=\"App\" style={{height: 400}}>\n        <h1 class=\"display-6\">{header}</h1>\n\n        {/* <ResponsiveLine\n            \n            data={data}\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n            xScale={{ type: 'point' }}\n            yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n            yFormat=\" >-.2f\"\n            theme = {theme}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={{\n                orient: 'bottom',\n                tickSize:   1,\n                tickPadding: 5,\n                tickRotation: -90,\n                legend: 'Time',\n                legendOffset: 50,\n                legendPosition: 'middle',   \n            }}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'Price',\n                legendOffset: -50,\n                legendPosition: 'middle'\n            }}\n            pointSize={10}\n            pointColor={{ theme: 'background' }}\n            pointBorderWidth={2}\n            pointBorderColor={{ from: 'serieColor' }}\n            pointLabelYOffset={-12}\n            useMesh={true}\n            legends= {legends}\n        /> */}\n        <DataFetch/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}